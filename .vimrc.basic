" ======================================================
" ==========        Basic Config            ============
" ======================================================
set t_Co=256       " required for airline

" This makes vim act like all other editoes, buffers can
" exist in the background without being in a window.
set hidden

set fileencodings=utf-8,ucs-bom,gb18030,gbk,gb2312,cp936
set termencoding=utf-8
set encoding=utf-8
set langmenu=zh-CN.UTF-8
" Use Unix as the standard file type
set ffs=unix,dos,mac

colorscheme desert

syntax enable      " turn on syntax highlighting
syntax on          " 自动语法高亮
filetype on

set autoread
set autowrite

set mouse=a
set selection=exclusive
set selectmode=mouse,key

" set paste会导致YCM的tab补全失效,导致delimitMate失效
" set paste

set ruler
set showcmd

set showmatch
set matchtime=1     "time for parenthesis matching

" 高亮当前行与列
set cursorline      " Highlight current line
set cursorcolumn    " Highlight current column
hi CursorColumn ctermbg=239
hi CursorLine ctermbg=240
hi MatchParen cterm=bold ctermfg=gray ctermbg=green

set laststatus=2    "显示状态栏，airline必需,required for airline

set history=10000

set nobackup
set noswapfile
set nowb

set report=0

set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*.pyc,*.png,*.jpg,*.gif     " MacOSX/Linux
set wildignore+=*\\tmp\\*,*.swp,*.zip,*.exe,*.pyc,*.png,*.jpg,*.gif  " Windows

set backspace=2

set tag=tags;/

set completeopt=longest,menu

set viminfo+=!

" 开启折叠功能
set foldenable
set foldmethod=syntax
set foldcolumn=3

" normal模式下直接按下zA即可
" zA 递归切换折叠状态
" zC 递归关闭折叠
" zD 递归删除折叠
" zE 去除所有折叠
" zO 递归打开折叠
" zc 关闭一个折叠
" zd 删除一个折叠
" zj, zk 移动光标至下一个折叠开始的地方(zj), zk同理

" 共享系统剪贴板
set clipboard+=unnamed

set backspace=indent,eol,start
set linespace=0
set number                      " 显示行号
set relativenumber              " 启用相对行号
set showmatch                   " 显示括号匹配情况
set matchtime=1

set winminheight=0
set wildmode=list:longest,full
set wildmenu                    " vim自身命令行模式智能补全
" not recommended
"set whichwrap+=<,>,[,],h,l,b,s
set scrolljump=5
set scrolloff=3

" ======== Indentation ========
set autoindent
set smartindent
set softtabstop=4
set shiftwidth=4
set tabstop=4
set expandtab

" Auto indent pasted text
nnoremap p p=`]<C-o>
nnoremap p p=`]<C-o>

" 调整缩进后自动选中，方便再次操作
vnoremap < <gv
vnoremap > >gv

" remap U to <C-r> for easier redo, 重做
nnoremap U <C-r>

set nowrap       " Don't wrap lines
set linebreak    " Wrap lines at convennient points

" ======== Search ========
set hlsearch     " Find the next match as we type the search
set incsearch    " Highlight searches by default
set ignorecase   " Ignore case when searching...
set smartcase    " ...unless we type a capital

" 设置search时搜索结果高亮的前景色与背景色
" 输入:hi 即可查看所有高亮的颜色设置
hi Search term=standout ctermfg=52 ctermbg=11
hi IncSearch term=reverse cterm=bold ctermfg=53

" =========================================================
" =========    Key Mapping
" =========================================================
" 设置前缀键为空格键，并在映射键的设置上吸取spacemacs的思想
let mapleader="\<Space>"

"========     简单操作          ========
"========                       ========
" quit, 退出
nmap <leader>q  :q<cr>
" 不保存直接退出
nmap <leader>Q  :qa!<cr>
" down, 向下移动半屏
nmap <leader>d  <C-d>
" up, 向上移动半屏
nmap <leader>u  <C-u>

" ========  文件操作, file           ========
" ========    <leader>f + *          ========
" file save, 保存文件
nmap <leader>fs :w<cr>
" file dotfile basic, 打开通用基本配置文件.vimrc.basic
map <silent> <leader>fdb :e ~/.vimrc.basic<cr>
" file dotfile extra, 打开个人基本配置文件.vimrc.extra
map <silent> <leader>fde :e ~/.vimrc.extra<cr>
" file dotfile vundle, 打开插件配置文件.vimrc.vundle
map <silent> <leader>fdv :e ~/.vimrc.vundle<cr>

" ========  窗口操作, window         ========
" ========    <leader>w + *          ========
" <leader>ww, 在所有窗口中循环移动
map <leader>ww <C-W>w
" <leader>wr, window replace, 向右或向下方交换窗口
map <leader>wr <C-W>r
" <leader>wc, window cancel, 关闭当前窗口
map <leader>wc <C-W>c
" <leader>wq, window quit, 关闭当前窗口,若是最后一个窗口则退出vim
map <leader>wq <C-W>q

" 分屏窗口移动, Smart way to move between windows
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l

" :sp filename 上下分割并打开文件filename
" :vsp filename 左右分割并打开文件filename


" ======= 缓冲区操作, buffer         ========
" =======     <leader>b + *          ========
" 切换前后buffer
nnoremap <leader>bp :bprevious<cr>
nnoremap <leader>bn :bnext<cr>
" bd : buffer delete
" bw : like bd, but really delete the buffer.
" Everything related to the buffer is lost.
" All marks in this buffer become invalid, option settings are lost, etc.
" Don't use this unless you know what you are doing.
nnoremap <leader>bd :bd<cr>
nnoremap <leader>bw :bw<cr>

" 根据buffer的数字编号进行切换
nnoremap <leader>b1 :b1<cr>
nnoremap <leader>b2 :b2<cr>
nnoremap <leader>b3 :b3<cr>
nnoremap <leader>b4 :b4<cr>
nnoremap <leader>b5 :b5<cr>
nnoremap <leader>b6 :b6<cr>
nnoremap <leader>b7 :b7<cr>
nnoremap <leader>b8 :b8<cr>
nnoremap <leader>b9 :b9<cr>

" ======  标签页操作，tab          =========
" ======      <leader>t + *        =========
" tab切换
nnoremap <leader>tf :tabfirst<cr>
nnoremap <leader>tl :tablast<cr>

nnoremap <leader>tj :tabnext<cr>
nnoremap <leader>tk :tabprev<cr>
nnoremap <leader>tn :tabnext<cr>
nnoremap <leader>tp :tabprev<cr>

nnoremap <leader>te :tabedit<cr>
nnoremap <leader>td :tabclose<cr>
nnoremap <leader>tm :tabm<cr>
nnoremap <leader>tl :tablast<cr>

" 新建tab  Ctrl+t
" nnoremap <C-t>     :tabnew<CR>
" inoremap <C-t>     <Esc>:tabnew<CR>

" normal模式下切换到确切的tab
nnoremap <leader>t1 1gt
nnoremap <leader>t2 2gt
nnoremap <leader>t3 3gt
nnoremap <leader>t4 4gt
nnoremap <leader>t5 5gt
nnoremap <leader>t6 6gt
nnoremap <leader>t7 7gt
nnoremap <leader>t8 8gt
nnoremap <leader>t9 9gt

" Toggles between the active and last active tab "
" The first tab is always 1 "
let g:last_active_tab = 1
" nnoremap <leader>gt :execute 'tabnext ' . g:last_active_tab<cr>
" nnoremap <silent> <c-o> :execute 'tabnext ' . g:last_active_tab<cr>
" vnoremap <silent> <c-o> :execute 'tabnext ' . g:last_active_tab<cr>
" nnoremap <silent> <leader>tt :execute 'tabnext ' . g:last_active_tab<cr>
autocmd TabLeave * let g:last_active_tab = tabpagenr()

autocmd BufRead,BufNewFile *.html set shiftwidth=2
autocmd BufRead,BufNewFile *.c,*.cpp,*.h set shiftwidth=4

" ===========================================
" ========    一些零散的实用设置    =========
" ===========================================

" 替换操作
" :s/old/new/
" 将当前这一行中第一个出现的模式old改为new./(斜线)用来分割命令的各部分
" :s/old/new/g 将当前这一行的每一个old更换成new, 而不只是第一个
" :50,100s/old/new/g,
" :s前可加上地址扩大有效范围，如将第50行至第100行之间的每一个出现的old更改为new
" :1,$/old/new/g ，该命令会将整个文件的old改为new
" 可以用%代替1,$, 因此全文更改也可写为:%s/old/new/g

" select all, 全选
map <Leader>sa ggVG

" yank, visual mode下将选中文本块复制至系统剪贴板
vnoremap <leader>y "+y
" paste, 将系统剪贴板内容粘贴至vim
nmap <leader>p "+p

" 映射全选加复制 Ctrl+a
map <C-a> ggVGY
map! <C-a> <Esc>ggVGY
" Ctrl+c 复制，Ctrl+v 粘贴
nmap <C-c> "+y
nmap <C-v> "+p

" Treat long lines ad break lines (useful when moving around in them)
map j gj
map k gk

" Remap VIM 0 to first non-blank character
" map 0 ^
" <leader>4 跳转到行尾
map <leader>4 $
" <leader>6 跳转到一行的第一个非空字符
map <leader>6 ^

" 搜索完后按<leader>hc, highlight cancel, 即可去掉高亮
map <leader>hc :nohl<cr>

" 在不关闭vim的情况下切换到shell命令行
map <leader>sh :shell<cr>
" 在shell里输入exit, 则退出shell切换回vim

" F键区可以分配给一些常用的功能
" 默认情况下F1为打开vim的内置帮助
" F5分配给编译运行功能
nnoremap <F5> :call CompileRunGcc()<cr>
function! CompileRunGcc()
    exec "w"
    if &filetype == 'c'
        exec "!gcc % -o %<"
        exec "!time ./%<"
    elseif &filetype == 'cpp'
        exec "!g++ -std=c++11 % -o %<"
        exec "!time ./%<"
    elseif &filetype == 'java'
        exec "!javac %"
        exec "!time java %<"
    elseif &filetype == 'sh'
        :!time bash %
    elseif &filetype == 'python'
        exec "!time python %"
    endif
endfunction

" Indent Python in the Google way.
" Google Python 编程风格

setlocal indentexpr=GetGooglePythonIndent(v:lnum)

let s:maxoff = 50 " maximum number of lines to look backwards.

function GetGooglePythonIndent(lnum)

    " Indent inside parens.
    " Align with the open paren unless it is at the end of the line.
    " E.g.
    "   open_paren_not_at_EOL(100,
    "                         (200,
    "                          300),
    "                         400)
    "   open_paren_at_EOL(
    "       100, 200, 300, 400)
    call cursor(a:lnum, 1)
    let [par_line, par_col] = searchpairpos('(\|{\|\[', '', ')\|}\|\]', 'bW',
                \ "line('.') < " . (a:lnum - s:maxoff) . " ? dummy :"
                \ . " synIDattr(synID(line('.'), col('.'), 1), 'name')"
                \ . " =~ '\\(Comment\\|String\\)$'")
    if par_line > 0
        call cursor(par_line, 1)
        if par_col != col("$") - 1
            return par_col
        endif
    endif

    " Delegate the rest to the original function.
    return GetPythonIndent(a:lnum)

endfunction

let pyindent_nested_paren="&sw*2"
let pyindent_open_paren="&sw*2"

" ======================================================
" ======== add title automatically for new file ========
" ========   新建文件时，自动添加文件头         ========
" ======================================================
autocmd BufNewFile *.py,*.rb,*.cpp,*.[ch],*.sh,*.java exec ":call SetTitle()"
function SetTitle()
    if &filetype == 'sh'
        call setline(1,"#!/bin/bash")
        call append(line("."), "")

    elseif &filetype == 'python'
        call setline(1,"#!/usr/bin/env python")
        call append(line("."), "# -*- coding: utf-8 -*-")
        call append(line(".")+1, "")

    elseif &filetype == 'ruby'
        call setline(1,"#!/usr/bin/env ruby")
        call append(line("."), "# encoding: utf-8")
        call append(line(".")+1, "")

    else
        call setline(1, "/*************************************************************************")
        call append(line("."), "    > File Name: ".expand("%"))
        call append(line(".")+1, "    > Created Time: ".strftime("%c"))
        call append(line(".")+2, " ************************************************************************/")
        call append(line(".")+3, "")
    endif

    if &filetype == 'cpp'
        call append(line(".")+4, "#include<iostream>")
        call append(line(".")+5, "using namespace std;")
        call append(line(".")+6, "")
    elseif &filetype == 'c'
        call append(line(".")+4, "#include<stdio.h>")
        call append(line(".")+5, "")
    endif
    normal G
    normal o
endfunction

" 设置标记一列的背景颜色和数字一行颜色一致
hi! link SignColumn   LineNr
hi! link ShowMarksHLl DiffAdd
hi! link ShowMarksHLu DiffChange

" for error highlight，防止错误整行标红导致看不清
highlight clear SpellBad
highlight SpellBad term=standout ctermfg=1 term=underline cterm=underline
highlight clear SpellCap
highlight SpellCap term=underline cterm=underline
highlight clear SpellRare
highlight SpellRare term=underline cterm=underline
highlight clear SpellLocal
highlight SpellLocal term=underline cterm=underline
