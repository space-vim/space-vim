
" =====================================================
" ========          Plugin Config           ===========
" =====================================================

" ========    airline                 ========
" ========    状态栏美化              ========
let t_Co=256
let g:airline_powerline_fonts=1
let g:airline_theme="luna"
let g:airline#extensions#tabline#enabled=1
let g:airline#extensions#tabline#buffer_nr_show=1
let g:airline#extensions#whitespce#enabled=0
let g:airline#extensions#whitespace#symbol='!'
let g:airline#extensions#whitespace#mixed_indent_algo=2
let g:Powerline_symbols="fancy"

" ========    indentLine Config       ========
" ========    显示代码缩进            ========
let g:indentLine_enabled=1
let g:indentLine_color_term=239
let g:indentLine_char='┊'
let g:indentLine_concealcursor='vc' " default 'inc'

" ========    nerdtree                ========
" ========    文件浏览                ========
let NERDTreeShowHidden=1            " 显示隐藏文件
let NERDTreeAutoDeleteBuffer=1      " 删除文件时自动删除文件对应buffer
let NERDTreeIgnore=['\.py[cd]$', '\~$', '\.swo$', '\.swp$', '^\.git$', '^\.hg$', '^\.svn$', '\.bzr$' ]

autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
autocmd BufEnter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif

" ========    nerdcommenter           ========
" ========    快速注释代码            ========
" Usage: <leader>cc : 注释当前行
"        <leader>cs : 优雅地注释
"        <leader>cu : 取消注释
let NERDSpaceDelims=1

" ========    delimitMate             ========
" ========    括号、引号等自动补全    ========
let delimitMate_expand_cr=1

" ========    vim-trailing-whitespace ========
" ========    去除行尾多余的空格      ========
" <leader>tr

" easymotion
" <leader><leader>w : word, 在单词间移动，往前
" <leader><leader>b : back, 在单词间移动，往后
" <leader><leader>s : search, 搜索跳转，双向
" <leader><leader>fc : forward character, c可以换成移动的目标字符

" vim-markdown
let g:vim_markdown_math=1
let g:vim_markdown_frontmatter=1

" ========    ultisnips               ========
" ========                            ========
" Set ultisnips triggers
let g:UltiSnipsSnippetDirectories=['UltiSnips']
let g:UltiSnipsSnippetsDir = '~/.vim/bundle/vim-snippets/UltiSnips/'
let g:UltiSnipsListSnippets = '<C-Tab>'
let g:UltiSnipsJumpForwardTrigger = '<Tab>'
let g:UltiSnipsJumpBackwardTrigger = '<S-Tab>'
" 解决ultisnips与YCM 的tab键补全冲突
" ultisnips选中后按enter键进行补全
let g:UltiSnipsExpandTrigger = "<nop>"
let g:ulti_expand_or_jump_res = 0
function ExpandSnippetOrCarriageReturn()
    let snippet = UltiSnips#ExpandSnippetOrJump()
    if g:ulti_expand_or_jump_res > 0
        return snippet
    else
        return "\<CR>"
    endif
endfunction
inoremap <expr> <CR> pumvisible() ? "<C-R>=ExpandSnippetOrCarriageReturn()<CR>" : "\<CR>"

" ========   ctrlp                    ========
" ========  快速查找文件              ========
let g:ctrlp_working_path_mode = 'ra'	" search for nearest ancestor like .git, .hg, and the directory of the current file
let g:ctrlp_match_window_bottom = 0		" show the match window at the top of the screen
let g:ctrlp_by_filename = 1
let g:ctrlp_max_height = 10				" maxiumum height of match window
let g:ctrlp_switch_buffer = 'et'		" jump to a file if it's open already
let g:ctrlp_use_caching = 1				" enable caching
let g:ctrlp_clear_cache_on_exit=0  		" speed up by not removing clearing cache evertime
let g:ctrlp_mruf_max = 250 				" number of recently opened files
let g:ctrlp_custom_ignore = {
            \ 'dir':  '\v[\/]\.(git|hg|svn|build)$',
            \ 'file': '\v\.(exe|so|dll)$',
            \ 'link': 'SOME_BAD_SYMBOLIC_LINKS',
            \ }
let g:ctrlp_user_command = ['.git/', 'git --git-dir=%s/.git ls-files -oc --exclude-standard']
let g:ctrlp_match_window_bottom = 0		" show the match window at the top of the screen
let g:ctrlp_by_filename = 1
let g:ctrlp_max_height = 10				" maxiumum height of match window
let g:ctrlp_switch_buffer = 'et'		" jump to a file if it's open already
let g:ctrlp_regexp = 1

" ========    rainbow                 ========
" ========    彩虹括号                ========
let g:rainbow_active=1
let g:rainbow_conf = {
            \   'guifgs': ['royalblue3', 'darkorange3', 'seagreen3', 'firebrick'],
            \   'ctermfgs': ['lightblue', 'lightyellow', 'lightcyan', 'lightmagenta'],
            \   'operators': '_,_',
            \   'parentheses': ['start=/(/ end=/)/ fold', 'start=/\[/ end=/\]/ fold', 'start=/{/ end=/}/ fold'],
            \   'separately': {
            \       '*': {},
            \       'tex': {
            \           'parentheses': ['start=/(/ end=/)/', 'start=/\[/ end=/\]/'],
            \       },
            \       'lisp': {
            \           'guifgs': ['royalblue3', 'darkorange3', 'seagreen3', 'firebrick', 'darkorchid3'],
            \       },
            \       'vim': {
            \           'parentheses': ['start=/(/ end=/)/', 'start=/\[/ end=/\]/', 'start=/{/ end=/}/ fold', 'start=/(/ end=/)/ containedin=vimFuncBody', 'start=/\[/ end=/\]/ containedin=vimFuncBody', 'start=/{/ end=/}/ fold containedin=vimFuncBody'],
            \       },
            \       'html': {
            \           'parentheses': ['start=/\v\<((area|base|br|col|embed|hr|img|input|keygen|link|menuitem|meta|param|source|track|wbr)[ >])@!\z([-_:a-zA-Z0-9]+)(\s+[-_:a-zA-Z0-9]+(\=("[^"]*"|'."'".'[^'."'".']*'."'".'|[^ '."'".'"><=`]*))?)*\>/ end=#</\z1># fold'],
            \       },
            \       'css': 0,
            \   }
            \}

" ===================================
" ========     syntastic     ========
" ===================================
" 每次调用:SyntasticSetLocList ，将错误覆盖 **quickfix**
let g:syntastic_always_populate_loc_list=1
" 自动拉起/关闭错误窗口，不需要手动调用:Errors
let g:syntastic_auto_loc_list=1
" 打开文件的时候做检查
let g:syntastic_check_on_open=0
" 每次保存的时候做检查
let g:syntastic_check_on_wq=0
let g:syntastic_enable_highlighting=1
let g:syntastic_python_checkers=['pyflakes']  " 使用pyflakes 比pylint快, 需要pip安装pyflakes，
let g:syntastic_javascript_checkers=['jsl', 'jshint']  " npm 安装
let g:syntastic_html_checkers=['tidy', 'jshint']

" 修改高亮的背景色
hi SyntasticErrorSign guifg=red guibg=black
"hi SyntasticWarnSign guifg=yellow guibg=black

set statusline+=%{SyntasticStatusLineFlag()}
" 配置error-sign
let g:syntastic_error_symbol='>>'
let g:syntastic_style_error_symbol='E'
let g:syntastic_warning_symbol='>*'
let g:syntastic_style_warning_symbol='W'
let g:syntastic_aggregate_errors=1



" =====================================
" ========    YouCompleteMe    ========
" =====================================
let g:ycm_global_ycm_extra_conf = '~/.vim/dotfile/.ycm_extra_conf.py'
" 不显示开启vim时检查ycm_extra_conf文件的信息
" let g:ycm_confirm_extra_conf=0
" 开启基于tag的补全，可以在这之后添加需要的标签路径
" let g:ycm_collect_identifiers_from_tags_files=1
"设置error和warning的提示符，如果没有设置，ycm会以syntastic的
" g:syntastic_warning_symbol 和 g:syntastic_error_symbol 这两个为准
let g:ycm_error_symbol='✘✘'
let g:ycm_warning_symbol='✘*'
" 不设置该选项YCM会经常crashed
let g:ycm_path_to_python_interpreter = '/usr/bin/python'
"注释和字符串中的文字也会被收入补全
let g:ycm_collect_identifiers_from_comments_and_strings = 1
" 输入第2个字符开始补全
let g:ycm_min_num_of_chars_for_completion=2
" 禁止缓存匹配项,每次都重新生成匹配项
let g:ycm_cache_omnifunc=0
" 开启语义补全
let g:ycm_seed_identifiers_with_syntax=1
"在注释输入中也能补全
let g:ycm_complete_in_comments = 1
"在字符串输入中也能补全
let g:ycm_complete_in_strings = 1
"注释和字符串中的文字也会被收入补全
let g:ycm_collect_identifiers_from_comments_and_strings = 0
" 设置在下面几种格式的文件上屏蔽ycm
let g:ycm_filetype_blacklist = {
            \ 'tagbar' : 1,
            \ 'nerdtree' : 1,
            \}
" 修改对C函数的补全快捷键，默认是CTRL + space，修改为ALT + ;
let g:ycm_key_invoke_completion = '<M-;>'


" =============================================
" ========    Plugin key mapping
" =============================================
" syntastic
map <leader>e :Errors<cr>
map <leader>st :SyntasticToggleMode<cr> " 开启/关闭syntastic
map <leader>sc :SyntasticCheck<cr>      " 手动调用语法检查
map <leader>si :SyntasticInfo<cr>       " 列出当前状态和可用check
map <leader>sr :SyntasticReset<cr>      " 清空错误信息

" vim-trailing-whitespace
map <leader>tr :FixWhitespace<cr>

" easymotion
" 行间跳转
map <Leader><Leader>j <Plug>(easymotion-j)
map <Leader><Leader>k <Plug>(easymotion-k)
" 行内跳转
map <Leader><leader>h <Plug>(easymotion-linebackward)
map <Leader><leader>l <Plug>(easymotion-lineforward)

" YouCompleteMe
"设置跳转的快捷键，可以跳转到definition和declaration
nnoremap <leader>gc :YcmCompleter GoToDeclaration<CR>
nnoremap <leader>gf :YcmCompleter GoToDefinition<CR>
nnoremap <leader>gg :YcmCompleter GoToDefinitionElseDeclaration<CR>
nnoremap <leader>yd :YcmDebugInfo<CR>
nnoremap <leader>yr :YcmRestartServer<CR>


" F3分配给NERDTree
map <F3> :NERDTreeToggle<cr>

