" ====================================================
" ========    General Config
" ====================================================
set t_Co=256       " required for airline

" This makes vim act like all other editoes, buffers can
" exist in the background without being in a window.
set hidden

set fileencodings=utf-8,ucs-bom,gb18030,gbk,gb2312,cp936
set termencoding=utf-8
set encoding=utf-8
set langmenu=zh-CN.UTF-8
" Use Unix as the standard file type
set ffs=unix,dos,mac

colorscheme desert

syntax enable      " turn on syntax highlighting66
" syntax on
filetype on

set autoread
set autowrite

set mouse=a
set selection=exclusive
set selectmode=mouse,key

" set paste会导致YCM的tab补全失效,导致delimitMate失效
" set paste

set ruler
set showcmd

set showmatch
set matchtime=1     "time for parenthesis matching

set cursorline      " Highlight current line
set cursorcolumn    " Highlight current column
hi CursorColumn ctermbg=239
hi CursorLine ctermbg=240
hi MatchParen cterm=bold ctermfg=gray ctermbg=green
autocmd InsertLeave * se nocul
autocmd InsertEnter * se cul

set laststatus=2    "required for airline

set history=10000

" ======== Turn off swap files ========
set nobackup
set noswapfile
set nowb

set report=0

set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*.pyc,*.png,*.jpg,*.gif     " MacOSX/Linux
set wildignore+=*\\tmp\\*,*.swp,*.zip,*.exe,*.pyc,*.png,*.jpg,*.gif  " Windows

set backspace=2

set tag=tags;/

set completeopt=longest,menu

set viminfo+=!

" 共享剪贴板
set clipboard+=unnamed

set backspace=indent,eol,start
set linespace=0
set number
set showmatch
set matchtime=1

set winminheight=0
set wildmode=list:longest,full
set wildmenu
" not recommended
"set whichwrap+=<,>,[,],h,l,b,s
set scrolljump=5
set scrolloff=3

" ======== Indentation ========
set autoindent
set smartindent
set softtabstop=4
set shiftwidth=4
set tabstop=4
set expandtab

" Auto indent pasted text
nnoremap p p=`]<C-o>
nnoremap p p=`]<C-o>

set nowrap       " Don't wrap lines
set linebreak    " Wrap lines at convennient points

" ======== Search ========
set hlsearch     " Find the next match as we type the search
set incsearch    " Highlight searches by default
set ignorecase   " Ignore case when searching...
set smartcase    " ...unless we type a capital
" 设置search时搜索结果高亮的前景色与背景色
" 输入:hi 即可查看所有高亮的颜色设置
hi Search term=standout ctermfg=52 ctermbg=11
hi IncSearch term=reverse cterm=bold ctermfg=53

" ======================================================
" =========    Key Mapping
" ======================================================
let mapleader="\<Space>"

nmap <leader>fs :w<cr>
nmap <leader>q  :q<cr>
nmap <leader>Q  :qa!<cr>
nmap <leader>d  <C-d>
nmap <leader>u  <C-u>

" 分屏窗口移动, Smart way to move between windows
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l


" 切换前后buffer
nnoremap <leader>bp :bprevious<cr>
nnoremap <leader>bn :bnext<cr>
nnoremap <leader>bd :bd<cr>
nnoremap <leader>bw :bw<cr>

nnoremap <leader>b1 :b1<cr>
nnoremap <leader>b2 :b2<cr>
nnoremap <leader>b3 :b3<cr>
nnoremap <leader>b4 :b4<cr>
nnoremap <leader>b5 :b5<cr>
nnoremap <leader>b6 :b6<cr>
nnoremap <leader>b7 :b7<cr>
nnoremap <leader>b8 :b8<cr>
nnoremap <leader>b9 :b9<cr>

" tab切换
map <leader>tf :tabfirst<cr>
map <leader>tl :tablast<cr>

map <leader>tj :tabnext<cr>
map <leader>tk :tabprev<cr>
map <leader>tn :tabnext<cr>
map <leader>tp :tabprev<cr>

map <leader>te :tabedit<cr>
map <leader>td :tabclose<cr>
map <leader>tm :tabm<cr>

" normal模式下切换到确切的tab
noremap <leader>t1 1gt
noremap <leader>t2 2gt
noremap <leader>t3 3gt
noremap <leader>t4 4gt
noremap <leader>t5 5gt
noremap <leader>t6 6gt
noremap <leader>t7 7gt
noremap <leader>t8 8gt
noremap <leader>t9 9gt
noremap <leader>tl :tablast<cr>

" Toggles between the active and last active tab "
" The first tab is always 1 "
let g:last_active_tab = 1
" nnoremap <leader>gt :execute 'tabnext ' . g:last_active_tab<cr>
" nnoremap <silent> <c-o> :execute 'tabnext ' . g:last_active_tab<cr>
" vnoremap <silent> <c-o> :execute 'tabnext ' . g:last_active_tab<cr>
nnoremap <silent> <leader>tt :execute 'tabnext ' . g:last_active_tab<cr>
autocmd TabLeave * let g:last_active_tab = tabpagenr()

" 新建tab  Ctrl+t
nnoremap <C-t>     :tabnew<CR>
inoremap <C-t>     <Esc>:tabnew<CR>

" select all
map <Leader>sa ggVG

" Treat long lines ad break lines (useful when moving around in them)
map j gj
map k gk

" Remap VIM 0 to first non-blank character
map 0 ^

" 映射全选加复制 Ctrl+a
map <C-a> ggVGY
map! <C-a> <Esc>ggVGY

" 将选中文本块复制至系统剪贴板
vnoremap <leader>y "+y
" 将系统剪贴板内容粘贴至vim
nmap <leader>p "+p
" F3分配给NERDTree
map <F3> :NERDTreeToggle<cr>
" f8分配给graphviz的dot命令，绘图
map <F8> :w<cr>:!dot -Tpng -o %<.png % && open %<.png<cr>

" =====================================================
" ========    Plugin Config                 ===========
" =====================================================

" ========    airline                 =========
" ========    状态栏美化              =========
let t_Co=256
let g:airline_powerline_fonts=1
let g:airline_theme="luna"
let g:airline#extensions#tabline#enabled=1
let g:airline#extensions#tabline#buffer_nr_show=1
let g:airline#extensions#whitespce#enabled=0
let g:airline#extensions#whitespace#symbol='!'
let g:airline#extensions#whitespace#mixed_indent_algo=2
let g:Powerline_symbols="fancy"

" ========    indentLine Config       ========
" ========    显示代码缩进            ========
let g:indentLine_enabled=1
let g:indentLine_color_term=239
let g:indentLine_char='┊'
let g:indentLine_concealcursor='vc' " default 'inc'

" ========    nerdtree                ========
" ========    文件浏览                ========
let NERDTreeShowHidden=1            " 显示隐藏文件
let NERDTreeAutoDeleteBuffer=1      " 删除文件时自动删除文件对应buffer

autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
autocmd BufEnter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif

" ========    nerdcommenter           ========
" ========    快速注释代码            ========
" Usage: <leader>cc : 注释当前行
"        <leader>cs : 优雅地注释
"        <leader>cu : 取消注释
let NERDSpaceDelims=1

" ========    delimitMate             ========
" ========    括号、引号等自动补全    ========
let delimitMate_expand_cr=1

" ========    vim-trailing-whitespace ========
" ========    去除行尾多余的空格      ========
map <leader>tr :FixWhitespace<cr>

" ========    ultisnips               ========
" ========                            ========
" Set ultisnips triggers
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"

" ========   ctrlp                    ========
" ========                            ========
let g:ctrlp_working_path_mode = 'ra'	" search for nearest ancestor like .git, .hg, and the directory of the current file
let g:ctrlp_match_window_bottom = 0		" show the match window at the top of the screen
let g:ctrlp_by_filename = 1
let g:ctrlp_max_height = 10				" maxiumum height of match window
let g:ctrlp_switch_buffer = 'et'		" jump to a file if it's open already
let g:ctrlp_use_caching = 1				" enable caching
let g:ctrlp_clear_cache_on_exit=0  		" speed up by not removing clearing cache evertime
let g:ctrlp_mruf_max = 250 				" number of recently opened files
let g:ctrlp_custom_ignore = {
            \ 'dir':  '\v[\/]\.(git|hg|svn|build)$',
            \ 'file': '\v\.(exe|so|dll)$',
            \ 'link': 'SOME_BAD_SYMBOLIC_LINKS',
            \ }
let g:ctrlp_user_command = ['.git/', 'git --git-dir=%s/.git ls-files -oc --exclude-standard']
let g:ctrlp_match_window_bottom = 0		" show the match window at the top of the screen
let g:ctrlp_by_filename = 1
let g:ctrlp_max_height = 10				" maxiumum height of match window
let g:ctrlp_switch_buffer = 'et'		" jump to a file if it's open already
let g:ctrlp_regexp = 1

" ========    rainbow                 ========
" ========    彩虹括号                ========
let g:rainbow_active=1
let g:rainbow_conf = {
            \   'guifgs': ['royalblue3', 'darkorange3', 'seagreen3', 'firebrick'],
            \   'ctermfgs': ['lightblue', 'lightyellow', 'lightcyan', 'lightmagenta'],
            \   'operators': '_,_',
            \   'parentheses': ['start=/(/ end=/)/ fold', 'start=/\[/ end=/\]/ fold', 'start=/{/ end=/}/ fold'],
            \   'separately': {
            \       '*': {},
            \       'tex': {
            \           'parentheses': ['start=/(/ end=/)/', 'start=/\[/ end=/\]/'],
            \       },
            \       'lisp': {
            \           'guifgs': ['royalblue3', 'darkorange3', 'seagreen3', 'firebrick', 'darkorchid3'],
            \       },
            \       'vim': {
            \           'parentheses': ['start=/(/ end=/)/', 'start=/\[/ end=/\]/', 'start=/{/ end=/}/ fold', 'start=/(/ end=/)/ containedin=vimFuncBody', 'start=/\[/ end=/\]/ containedin=vimFuncBody', 'start=/{/ end=/}/ fold containedin=vimFuncBody'],
            \       },
            \       'html': {
            \           'parentheses': ['start=/\v\<((area|base|br|col|embed|hr|img|input|keygen|link|menuitem|meta|param|source|track|wbr)[ >])@!\z([-_:a-zA-Z0-9]+)(\s+[-_:a-zA-Z0-9]+(\=("[^"]*"|'."'".'[^'."'".']*'."'".'|[^ '."'".'"><=`]*))?)*\>/ end=#</\z1># fold'],
            \       },
            \       'css': 0,
            \   }
            \}

" ===================================
" ========     syntastic     ========
" ===================================
" 每次调用:SyntasticSetLocList ，将错误覆盖 **quickfix**
let g:syntastic_always_populate_loc_list=1
" 自动拉起/关闭错误窗口，不需要手动调用:Errors
let g:syntastic_auto_loc_list=1
" 打开文件的时候做检查
let g:syntastic_check_on_open=0
" 每次保存的时候做检查
let g:syntastic_check_on_wq=0
let g:syntastic_enable_highlighting=1
let g:syntastic_python_checkers=['pyflakes']  " 使用pyflakes 比pylint快, 需要pip安装pyflakes，
let g:syntastic_javascript_checkers=['jsl', 'jshint']  " npm 安装
let g:syntastic_html_checkers=['tidy', 'jshint']

" 修改高亮的背景色
hi SyntasticErrorSign guifg=red guibg=black
"hi SyntasticWarnSign guifg=yellow guibg=black

set statusline+=%{SyntasticStatusLineFlag()}
" 配置error-sign
let g:syntastic_error_symbol='>>'
let g:syntastic_style_error_symbol='E'
let g:syntastic_warning_symbol='>*'
let g:syntastic_style_warning_symbol='W'
let g:syntastic_aggregate_errors=1

map <leader>e :Errors<cr>
map <leader>st :SyntasticToggleMode<cr> " 开启/关闭syntastic
map <leader>sc :SyntasticCheck<cr>      " 手动调用语法检查
map <leader>si :SyntasticInfo<cr>       " 列出当前状态和可用check
map <leader>sr :SyntasticReset<cr>      " 清空错误信息

" =====================================
" ========    YouCompleteMe    ========
" =====================================
let g:ycm_global_ycm_extra_conf = '~/.vim/dotfile/.ycm_extra_conf.py'
" 不显示开启vim时检查ycm_extra_conf文件的信息
" let g:ycm_confirm_extra_conf=0
" 开启基于tag的补全，可以在这之后添加需要的标签路径
" let g:ycm_collect_identifiers_from_tags_files=1
"设置error和warning的提示符，如果没有设置，ycm会以syntastic的
" g:syntastic_warning_symbol 和 g:syntastic_error_symbol 这两个为准
let g:ycm_error_symbol='✘✘'
let g:ycm_warning_symbol='✘*'
" 不设置该选项YCM会经常crashed
let g:ycm_path_to_python_interpreter = '/usr/bin/python'
"注释和字符串中的文字也会被收入补全
let g:ycm_collect_identifiers_from_comments_and_strings = 1
" 输入第2个字符开始补全
let g:ycm_min_num_of_chars_for_completion=2
" 禁止缓存匹配项,每次都重新生成匹配项
let g:ycm_cache_omnifunc=0
" 开启语义补全
let g:ycm_seed_identifiers_with_syntax=1
"在注释输入中也能补全
let g:ycm_complete_in_comments = 1
"在字符串输入中也能补全
let g:ycm_complete_in_strings = 1
"注释和字符串中的文字也会被收入补全
let g:ycm_collect_identifiers_from_comments_and_strings = 0
" 设置在下面几种格式的文件上屏蔽ycm
let g:ycm_filetype_blacklist = {
            \ 'tagbar' : 1,
            \ 'nerdtree' : 1,
            \}
" 修改对C函数的补全快捷键，默认是CTRL + space，修改为ALT + ;
let g:ycm_key_invoke_completion = '<M-;>'

"设置跳转的快捷键，可以跳转到definition和declaration
nnoremap <leader>gc :YcmCompleter GoToDeclaration<CR>
nnoremap <leader>gf :YcmCompleter GoToDefinition<CR>
nnoremap <leader>gg :YcmCompleter GoToDefinitionElseDeclaration<CR>
nnoremap <leader>yd :YcmDebugInfo<CR>
nnoremap <leader>yr :YcmRestartServer<CR>

" ======================================================
" ======== add title automatically for new file ========
" ======================================================
autocmd BufNewFile *.py,*.rb,*.cpp,*.[ch],*.sh,*.java exec ":call SetTitle()"
func SetTitle()
    if &filetype == 'sh'
        call setline(1,"#!/bin/bash")
        call append(line("."), "")

    elseif &filetype == 'python'
        call setline(1,"#!/usr/bin/env python")
        call append(line("."), "# -*- coding: utf-8 -*-")
        call append(line(".")+1, "")

    elseif &filetype == 'ruby'
        call setline(1,"#!/usr/bin/env ruby")
        call append(line("."), "# encoding: utf-8")
        call append(line(".")+1, "")

    else
        call setline(1, "/*************************************************************************")
        call append(line("."), "    > File Name: ".expand("%"))
        call append(line(".")+1, "    > Created Time: ".strftime("%c"))
        call append(line(".")+2, " ************************************************************************/")
        call append(line(".")+3, "")
    endif

    if &filetype == 'cpp'
        call append(line(".")+4, "#include<iostream>")
        call append(line(".")+5, "using namespace std;")
        call append(line(".")+6, "")
    elseif &filetype == 'c'
        call append(line(".")+4, "#include<stdio.h>")
        call append(line(".")+5, "")
    endif
    normal G
    normal o
endfunc

" Set extra options when running in GUI mode
if has("gui_running")
    " set guifont=Monaco:h14
    set guifont＝Source\ Code\ Pro\ for\ Powerline
    if has("gui_gtk2")   "GTK2
        set guifont=Monaco\ 12,Monospace\ 12
    endif
    set guioptions-=T
    set guioptions+=e
    set guioptions-=r
    set guioptions-=L
    set guitablabel=%M\ %t
    set showtabline=1
    set linespace=2
    set noimd
    set t_Co=256
    syntax on
    set hlsearch
    colorscheme macvim
    set bs=2
    set ai
    set ruler
endif


" 设置标记一列的背景颜色和数字一行颜色一致
hi! link SignColumn   LineNr
hi! link ShowMarksHLl DiffAdd
hi! link ShowMarksHLu DiffChange

" for error highlight，防止错误整行标红导致看不清
highlight clear SpellBad
highlight SpellBad term=standout ctermfg=1 term=underline cterm=underline
highlight clear SpellCap
highlight SpellCap term=underline cterm=underline
highlight clear SpellRare
highlight SpellRare term=underline cterm=underline
highlight clear SpellLocal
highlight SpellLocal term=underline cterm=underline
